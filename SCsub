
#!/usr/bin/env python

Import("env")
Import("env_modules")

env_juce = env_modules.Clone()

# handle third party source files

thirdparty_obj = []


env_juce.Append(CPPPATH=["#thirdparty/juce/"])

env_juce.Append(LIBPATH=['juce'])

# Check with the documentation of the external library to see which library
# files should be included/linked.
env_juce.Append(LIBS=['juceBlob'])

# add source files
# thirdparty_dir = "#thirdparty/juce/"
# thirdparty_sources = [
# 	"juce_core/juce_core.cpp",
# 	"juce_audio_basics/juce_audio_basics.cpp",
# 	"juce_audio_processors/juce_audio_processors.cpp",
# 	"juce_events/juce_events.cpp",
# 	"juce_gui_extra/juce_gui_extra.cpp",
#     "juce_graphics/juce_graphics.cpp",
#     "juce_gui_basic/juce_gui_basic.cpp",
#     "juce_data_structures/juce_data_structures.cpp",

# ]

# thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

# env_juce.Prepend(CPPPath=[thirdparty_dir])

# env_thirdparty = env_juce.Clone()
# env_thirdparty.disable_warnings()
# env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
# env.modules_sources += thirdparty_obj




# Godot source files

module_obj = []

env_juce.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
